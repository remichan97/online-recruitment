//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace online_recruitment.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Applicant> Applicants { get; set; }
        public virtual DbSet<ApplicantStatu> ApplicantStatus { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Interview> Interviews { get; set; }
        public virtual DbSet<InterviewStatu> InterviewStatus { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Vacancy> Vacancies { get; set; }
        public virtual DbSet<VacancyStatu> VacancyStatus { get; set; }
    
        public virtual int sp_banApplicant(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_banApplicant", idParameter);
        }
    
        public virtual int sp_ChangePassword(string oldpassword, string newpassword, string username)
        {
            var oldpasswordParameter = oldpassword != null ?
                new ObjectParameter("oldpassword", oldpassword) :
                new ObjectParameter("oldpassword", typeof(string));
    
            var newpasswordParameter = newpassword != null ?
                new ObjectParameter("newpassword", newpassword) :
                new ObjectParameter("newpassword", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChangePassword", oldpasswordParameter, newpasswordParameter, usernameParameter);
        }
    
        public virtual int sp_CreateApplicant(string name, string phonenumber, string email, Nullable<int> departmentId, string cvfile)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phonenumberParameter = phonenumber != null ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var cvfileParameter = cvfile != null ?
                new ObjectParameter("cvfile", cvfile) :
                new ObjectParameter("cvfile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateApplicant", nameParameter, phonenumberParameter, emailParameter, departmentIdParameter, cvfileParameter);
        }
    
        public virtual int sp_CreateNewEmployee(string username, string password, Nullable<int> departmentId, string fullname, string email, string phonenumber, Nullable<int> roleId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("fullname", fullname) :
                new ObjectParameter("fullname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phonenumberParameter = phonenumber != null ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateNewEmployee", usernameParameter, passwordParameter, departmentIdParameter, fullnameParameter, emailParameter, phonenumberParameter, roleIdParameter);
        }
    
        public virtual int sp_CreateVacancy(string name, string description, Nullable<System.DateTime> closingdate, Nullable<int> quantity, Nullable<int> employeeId, Nullable<int> departmentID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var closingdateParameter = closingdate.HasValue ?
                new ObjectParameter("closingdate", closingdate) :
                new ObjectParameter("closingdate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateVacancy", nameParameter, descriptionParameter, closingdateParameter, quantityParameter, employeeIdParameter, departmentIDParameter);
        }
    
        public virtual int sp_EditApplicant(Nullable<int> id, string name, string phonenumber, string email, Nullable<int> departmentId, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phonenumberParameter = phonenumber != null ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditApplicant", idParameter, nameParameter, phonenumberParameter, emailParameter, departmentIdParameter, statusParameter);
        }
    
        public virtual int sp_EditEmployee(Nullable<int> userid, Nullable<int> departmentId, string fullname, string email, string phonenumber, Nullable<int> roleId)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("fullname", fullname) :
                new ObjectParameter("fullname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phonenumberParameter = phonenumber != null ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditEmployee", useridParameter, departmentIdParameter, fullnameParameter, emailParameter, phonenumberParameter, roleIdParameter);
        }
    
        public virtual int sp_EditVacancy(Nullable<int> id, string name, string description, Nullable<System.DateTime> closingdate, Nullable<int> quantity, Nullable<int> departmentID, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var closingdateParameter = closingdate.HasValue ?
                new ObjectParameter("closingdate", closingdate) :
                new ObjectParameter("closingdate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditVacancy", idParameter, nameParameter, descriptionParameter, closingdateParameter, quantityParameter, departmentIDParameter, statusParameter);
        }
    
        public virtual int sp_resetPassword(Nullable<int> userId, string pw)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var pwParameter = pw != null ?
                new ObjectParameter("pw", pw) :
                new ObjectParameter("pw", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_resetPassword", userIdParameter, pwParameter);
        }
    
        public virtual int sp_UpdateInfo(string fullname, string email, string phonenumber, string username)
        {
            var fullnameParameter = fullname != null ?
                new ObjectParameter("fullname", fullname) :
                new ObjectParameter("fullname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phonenumberParameter = phonenumber != null ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateInfo", fullnameParameter, emailParameter, phonenumberParameter, usernameParameter);
        }
    
        public virtual int sp_AssignVacancy(Nullable<int> applicantID, Nullable<int> vacancyId, Nullable<int> employeeId)
        {
            var applicantIDParameter = applicantID.HasValue ?
                new ObjectParameter("applicantID", applicantID) :
                new ObjectParameter("applicantID", typeof(int));
    
            var vacancyIdParameter = vacancyId.HasValue ?
                new ObjectParameter("vacancyId", vacancyId) :
                new ObjectParameter("vacancyId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AssignVacancy", applicantIDParameter, vacancyIdParameter, employeeIdParameter);
        }
    
        public virtual int sp_AcceptCandidate(Nullable<int> id, Nullable<int> applicantId, Nullable<int> vacancyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            var vacancyIdParameter = vacancyId.HasValue ?
                new ObjectParameter("vacancyId", vacancyId) :
                new ObjectParameter("vacancyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AcceptCandidate", idParameter, applicantIdParameter, vacancyIdParameter);
        }
    
        public virtual int sp_RejectCandidate(Nullable<int> id, Nullable<int> applicantId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RejectCandidate", idParameter, applicantIdParameter);
        }
    
        public virtual int sp_ScheduleInterview(Nullable<int> id, Nullable<System.DateTime> interviewdate, Nullable<System.TimeSpan> starttime, Nullable<System.TimeSpan> endtime, Nullable<int> applicantId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var interviewdateParameter = interviewdate.HasValue ?
                new ObjectParameter("interviewdate", interviewdate) :
                new ObjectParameter("interviewdate", typeof(System.DateTime));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.TimeSpan));
    
            var endtimeParameter = endtime.HasValue ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(System.TimeSpan));
    
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("applicantId", applicantId) :
                new ObjectParameter("applicantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ScheduleInterview", idParameter, interviewdateParameter, starttimeParameter, endtimeParameter, applicantIdParameter);
        }
    }
}
